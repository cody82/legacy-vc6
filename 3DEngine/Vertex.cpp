#include "vertex.h"
#include "math.h"

#pragma warning (disable : 4244)
#define DEG2RAD(x) (x*(float)3.1415927/(float)180)

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX::VERTEX
//////////////////////////////////////////////////////////////////////////////////////////////
VERTEX::VERTEX(void)
{
	x = y = z = 0;
	color = 0;
	specular = 0;
	tu = tv = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX::VERTEX
//////////////////////////////////////////////////////////////////////////////////////////////
VERTEX::VERTEX(float _x, float _y, float _z, DWORD _color, DWORD _specular, float _tu, float _tv )
{
	x = _x;
	y = _y;
	z = _z;
	color = _color;
	specular = _specular;
	tu = _tu;
	tv = _tv;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX::VERTEX
//////////////////////////////////////////////////////////////////////////////////////////////
VERTEX::VERTEX(const VERTEX& vertex)
{
	x = vertex.x;
	y = vertex.y;
	z = vertex.z;
	color = vertex.color;
	specular = vertex.specular;
	tu = vertex.tu;
	tv = vertex.tv;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX = Operator
//////////////////////////////////////////////////////////////////////////////////////////////
VERTEX &VERTEX::operator = (const VERTEX &vertex)
{
	x = vertex.x;
	y = vertex.y;
	z = vertex.z;
	color = vertex.color;
	specular = vertex.specular;
	tu = vertex.tu;
	tv = vertex.tv;

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX + Operator
//////////////////////////////////////////////////////////////////////////////////////////////
VERTEX &VERTEX::operator + (const VERTEX &vertex)
{
	return VERTEX(x + vertex.x, y + vertex.y, z + vertex.z, 0, 0, 0, 0);
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX - Operator
//////////////////////////////////////////////////////////////////////////////////////////////
VERTEX &VERTEX::operator - (const VERTEX &vertex)
{
	return VERTEX(x - vertex.x, y - vertex.y, z - vertex.z, 0, 0, 0, 0);
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX::RotateX
//////////////////////////////////////////////////////////////////////////////////////////////
void VERTEX::RotateX(float angle)
{
	float c = (float)cos(DEG2RAD(angle));
	float s = (float)sin(DEG2RAD(angle));

	x = x;
	y = (y*c) - (z*s);
	z = (y*s) + (z*c);
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX::RotateY
//////////////////////////////////////////////////////////////////////////////////////////////
void VERTEX::RotateY(float angle)
{
	float c = (float)cos(DEG2RAD(angle));
	float s = (float)sin(DEG2RAD(angle));

	x = (x*c) + (z*s);
	y = y;
	z = (z*c) - (x*s);
}

//////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX::RotateZ
//////////////////////////////////////////////////////////////////////////////////////////////
void VERTEX::RotateZ(float angle)
{
	float c = (float)cos(DEG2RAD(angle));
	float s = (float)sin(DEG2RAD(angle));

	x = (x*c) - (y*s);
	y = (x*s) + (y*c);
	z = z;
}
